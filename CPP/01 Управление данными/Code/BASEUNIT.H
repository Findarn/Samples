//Base unit - модуль, в котором описываются глобальные переменные и функции, которые будут задействованы во всей программе в разных её модулях.

#include "desunit.h"			//подключаем основной модуль, в котором описаны имена файлов и структур
								//создаем глобальные указатели на файлы
FILE *fArTxt;					//оригинальный текстовый файл, содержащий записи архива
FILE *fArBin;					//бинарный файл архива, формирующийся в процессе работы программы
FILE *fAddTxt;					//оригинальный текстовый файл, используемый в качестве дополнения архива
FILE *fKodif;					//оригинальный текстовый файл, содержащий записи кодификатора
FILE *fRes;						//текстовый файл, используемый для записи результата работы программы
KodifType	 Kodif,				//определяем переменную для одной единицы записи кодификатора
		Kodifs[KMax];			//и массив переменных записи кодификатора размером KMax

unsigned char SignArchive=0;	//флаг, отражающий состояние создания архива. 0 - не создан, 1 - создан  
unsigned char FlagSort = 0;		//флаг, который определяет, проводилась ли сортировка архива. 0 - не проводилась, 1 - проводилась
unsigned char FlagAdd = 0;		//флаг, который определяет, происходило ли дополнение архива. 0 - не происходило, 1 - происходило
int nk=0;						//количество записей кодификатора 
int Device;						//флаг, который определяет, необходимо ли выводить результаты работы программы в отдельный файл. 0 - не выводить в файл, 1 - выводить

//Функция, останавливающая выполнение программы до нажатия любой клавиши
void wait_press_key(char *msg);
//Печатает строку S с учетом того, выбран ли файл в качестве приёмника вывода
void WritelnString(char S[80]);
//В строке s ищет пробел, начиная с k-ого символа. возвращает его позицию или -1, если пробел не найден
int Space(char *s, int k);
//В строке s ищет символ, отличный от пробела, начиная с k-ого символа. возвращает его позицию или -1
int NotSpace(char *s, int k);
//Заполняет строку S пробелами до длины len. pk определяет, с какой стороны заполняется строка (1 - справа, 0 - слева)
char *FillString(char *S, unsigned char len, unsigned char pk);
//Ввод числа с клавиатуры в формат с плавающей запятой - double.
//Ввод осуществляется с контролем - MinNumber и MaxNumber - это область допустимых значений
//m1, n1, m2, n2 - переменные для задания строки форматов
double GetNumber(double MinNumber, double MaxNumber, char m1,char n1,char m2,char n2);
//Устанавливает, будет ли файл использоваться для вывода информации
void UsesDevice();
//очищает буфер от символа переноса строки
int clear_input_buffer();
//выполняет поиск элемента Kod в массиве кодификаторов. в функцию передаётся количество записей кодификатора nk. Предполагается, что кодификатор отсортирован
//Поиск, реализованный этой функцией, называется бинарным поиском
int SearchKodif(int Kod, int nk);
//выполняет сортировку кодификатора по коду школьным модифицированным методом
void SortKodif(int nk);
//Чтение бинарного файла архива, формирование очереди из структур
//Функция возвращает 0, если очередь создана, иначе - 1
int ReadFileOut(int *np, DynDirectory **Lp, DynDirectory **Rp);
//Запись очереди из структур в бинарный файл архива
int WriteFileOut(DynDirectory *Lp, DynDirectory *Rp);
//Удаление очереди из структур
void DisposeDirectory(DynDirectory *Lp, DynDirectory *Rp);

