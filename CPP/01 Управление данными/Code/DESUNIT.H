//Description Unit - модуль, в котором описываются глобальные файловые и структурные переменные,
//с которыми будет производится работа программы.
//Подключаем библиотеки, функции которых будут использоваться во всех модулях программы
#include<stdio.h>
#include<math.h>
#include<string.h>
#include<conio.h> 
#include<windows.h>
//Определяем глобальные переменные файлов
#define fArTxtName "input.txt" 
#define fArBinName "arhiv.bin" 
#define fAddTxtName  "add.txt" 
#define fResName     "res.txt" 
#define fKodifName "kodif.txt" 
#define KMax 200		
#define PMax 200		 
//Определяем структуру записи в телефонном справочнике
//Структура - пользовательский тип данных, который может включать в себя
//как базовые типы, так и другие пользовательские
typedef struct DirectoryT   //задаем имя пользовательскому типу
				{			
					char Num[5];			//Номер записи - две буквы + четыре цифры - массив символов (строка) типа char
					int Code;				//Код фамилии и инициалов                 - целочисленный тип int
					int Birthday;			//Дата рождения в формате ГГГГДДММ        - целочисленный тип int
					char Street[15];		//Название улицы                          - массив символов (строка) типа char
					int House;				//Номер дома                              - целочисленный тип int
					int Flat;				//Номер квартиры                          - целочисленный тип int
					int Phone;				//Номер телефона (при отсутствии = 0)     - целочисленный тип int

				} DirectoryType;			//синоним имени структуры - его можно использовать для обращения к этому типу наравне с её именем

//Определяем структуру записи кодификатора
typedef struct KodifTyp   
				{							
					int  Code;				//Код фамилии и инициалов                 - целочисленный тип int
					char FIO[20];			//Фамилия и инициалы					  - массив символов (строка) типа char
				} KodifType;		 
//Определяем структуру динамического списка. По ТЗ тип динамического списка - очередь
//Очередь - это однонаправленный динамический список, который имеет указатели на начало и на конец списка
//Просматривается очередь слева направо - в одном направлении
//Таким образом в одном элементе очереди есть два поля - указатель на такой же элемент очереди и информационное поле
//В качестве информационного поля выступает структура DirectoryT
typedef struct DynDire		
				{							
					DirectoryType  Inf;		//Информационное поле - структура записи архива
					struct DynDire *Next;	//Ссылка на элемент очереди
				} DynDirectory;			
